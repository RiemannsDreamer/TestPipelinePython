name: Advanced CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  checkout:
    name: Checkout Repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

  setup-python:
    name: Set up Python
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

  install-dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    needs: setup-python
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install flake8 black isort mypy bandit

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

  linting:
    name: Run Linters & Checks
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Cached Dependencies
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: Run Flake8
        run: source venv/bin/activate && flake8 .
        continue-on-error: true

      - name: Run Black
        run: source venv/bin/activate && black --check .
        continue-on-error: true

      - name: Run Isort
        run: source venv/bin/activate && isort . --check-only
        continue-on-error: true

      - name: Run Mypy
        run: source venv/bin/activate && mypy .
        continue-on-error: true

      - name: Run Bandit
        run: source venv/bin/activate && bandit -r .
        continue-on-error: true

  security:
    name: Security & Dependency Checks
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Cached Dependencies
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: Install Safety
        run: |
          source venv/bin/activate
          pip install safety

      - name: Run Security Audit
        run: source venv/bin/activate && safety check
        continue-on-error: true

  tests:
    name: Run Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Load Cached Dependencies
        uses: actions/cache@v3
        with:
          path: venv
          key: venv-${{ runner.os }}-${{ hashFiles('requirements.txt') }}

      - name: Run Tests with Coverage
        run: source venv/bin/activate && pytest --cov=. --cov-report=xml --cov-report=html

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.xml
          flags: unittests

  code_quality:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install SonarScanner
        run: |
          wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.6.2.2472-linux.zip
          unzip sonar-scanner.zip
          echo "$(pwd)/sonar-scanner-4.6.2.2472-linux/bin" >> $GITHUB_PATH

      - name: Run SonarCloud Analysis
        run: sonar-scanner -Dsonar.organization=my-org -Dsonar.projectKey=my-project -Dsonar.python.version=3.10
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  deploy:
    name: Deploy to Production
    needs: [linting, security, tests, code_quality]
    runs-on: ubuntu-latest
    if: success()
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy to Server
        run: ./deploy.sh
